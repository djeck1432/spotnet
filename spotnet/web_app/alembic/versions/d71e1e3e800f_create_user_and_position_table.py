"""create user and position table'


Revision ID: d71e1e3e800f
Revises: 
Create Date: 2024-10-12 20:41:29.852081

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection


# revision identifiers, used by Alembic.
revision = "d71e1e3e800f"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade the database schema.

    This function performs the following operations:
    - Create 'user' table if it does not exist
    - Create 'position' table if it does not exist
    """
    # ### commands auto generated by Alembic - please adjust! ###

    # Create 'user' table if it does not exist
    bind = op.get_bind()
    inspector = reflection.Inspector.from_engine(bind)
    if "user" not in inspector.get_table_names():
        op.create_table(
            "user",
            sa.Column("id", sa.UUID(), nullable=False),
            sa.Column("is_contract_deployed", sa.Boolean(), nullable=True),
            sa.Column("wallet_id", sa.String(), nullable=False),
            sa.Column("deployed_transaction_hash", sa.String(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(op.f("ix_user_wallet_id"), "user", ["wallet_id"], unique=False)

    # Create 'position' table if it does not exist
    if "position" not in inspector.get_table_names():
        op.create_table(
            "position",
            sa.Column("id", sa.UUID(), nullable=False),
            sa.Column("user_id", sa.UUID(), nullable=False),
            sa.Column("token_symbol", sa.String(), nullable=False),
            sa.Column("amount", sa.String(), nullable=False),
            sa.Column("multiplier", sa.Integer(), nullable=False),
            sa.Column("created_at", sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            op.f("ix_position_user_id"), "position", ["user_id"], unique=False
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade the database schema.

    This function performs the following operations:
    - Drop 'position' table if it exists
    - Drop 'user' table if it exists
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_position_user_id"), table_name="position")
    op.drop_table("position")
    op.drop_index(op.f("ix_user_wallet_id"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
